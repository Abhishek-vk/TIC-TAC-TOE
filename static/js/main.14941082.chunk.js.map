{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["win","BoardBtn","this","props","style","onClick","value","className","React","Component","Board","state","bgStyleWin","background","outline","border","bgStyleDraw","color","x","y","string","checkWin","xy","includes","count","i","e","current","setValue","val","handleClick","renderBox","App","resetValue","setState","clearTimeout","timer","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14941082.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nlet win=false\n\nclass BoardBtn extends React.Component{\n  render(){\n    const {style,onClick,value}=this.props;\n    return(\n      <button style={style} onClick={onClick} className='button'>{value}</button>\n    )\n  }\n}\n\nclass Board extends React.Component{\n  \n  state={\n    bgStyleWin:{\n      background:'-webkit-radial-gradient(circle, white, #77cce0)',\n      outline:'none',\n      border:'1px solid grey'\n    },\n    bgStyleDraw:{\n      background:'-webkit-radial-gradient(circle, white, #FF462D)',\n      outline:'none',\n      border:'1px solid grey'\n    }\n  }\n\n  checkWin(){\n    let value={...this.props.value};\n    if(value[0][0]!=='' && value[0][0]===value[1][1] && value[0][0]===value[2][2])\n      return '00,11,22';\n    else if(value[1][1]!=='' && value[1][1]===value[0][2] && value[1][1]===value[2][0])\n      return '02,11,20';\n    for(var i=0; i<3; i++)\n    {\n      if(value[i][0]!=='' && value[i][0]===value[i][1] && value[i][0]===value[i][2])\n        return i+'0,'+i+'1,'+i+'2';\n      else if(value[0][i]!=='' && value[0][i]===value[1][i] && value[0][i]===value[2][i])\n        return '0'+i+',1'+i+',2'+i;\n    }\n    return false;\n  }\n\n  color=(x,y)=>{\n    var string=this.checkWin();\n    var xy=x+''+y;\n    if(string){\n      if(string.includes(xy))\n        return this.state.bgStyleWin;\n      else\n        return this.state.bgStyleDraw;\n    }\n    else if(this.props.count===9)\n      return this.state.bgStyleDraw;\n  }\n\n  handleClick(e,x,y){\n    let value={...this.props.value};\n    if(value[x][y]!=='' || win)\n      return;\n    let current=this.props.current;\n    value[x][y]=this.props.current;\n    if(this.checkWin())\n      win=true;\n    this.props.setValue(value,current);\n  }\n\n  renderBox(x,y){\n    let val=this.props.value[x][y];\n    return(\n      <BoardBtn style={this.color(x,y)} onClick={(e)=>this.handleClick(e,x,y)} value={val}/>\n    )\n  }\n\n  render(){\n    return(\n\t    <div className='main'>\n\t      <div className='box-row'>\n\t        {this.renderBox(0,0)}\n\t        {this.renderBox(0,1)}\n\t        {this.renderBox(0,2)}\n\t      </div>\n\t      <div className='box-row'>\n\t        {this.renderBox(1,0)}\n\t        {this.renderBox(1,1)}\n\t        {this.renderBox(1,2)}\n\t      </div>\n\t      <div className='box-row'>\n\t        {this.renderBox(2,0)}\n\t        {this.renderBox(2,1)}\n\t        {this.renderBox(2,2)}\n\t      </div>\n\t    </div>\n    )\n  }\n}\n\nclass Clear extends React.Component{\n  render(){\n    return(\n        <div className='App'>\n          <div className='cover'>\n          </div>\n        </div>\n      )\n  }\n}\n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      current:'X',\n      value:[['','',''],['','',''],['','','']],\n      count:0\n    }\n  }\n\n  timer;\n\n  resetValue=()=>{\n    this.setState({\n      current:'X',\n      value:[['','',''],['','',''],['','','']],\n      count:0\n    });\n    clearTimeout(this.timer);\n    win=false;\n  }\n\n  setValue(value,current){\n    current=(current==='X')?'O':'X';\n    this.setState({value,current,count:this.state.count+1});\n    if(this.state.count===8 || win){\n      this.timer=setTimeout(()=>this.resetValue(),5000);\n    }\n  }\n\n  render(){\n    const {value,current,count}=this.state;\n    return(\n      <div className='App'>\n      <h4>TIC-TAC-TOE</h4>\n      <Board value={value} current={current} setValue={()=>this.setValue(value,current)} count={count}/>\n      <button className='btn-reset' onClick={this.resetValue}>RESET</button></div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}